#!/usr/bin/env python3

# MIT License
#
# Copyright (c) 2021 Eugenio Parodi <ceccopierangiolieugenio AT googlemail DOT com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This code is inspired by
# https://github.com/ceccopierangiolieugenio/pyCuT/blob/master/cupy/CuTCore/CuDebug.py

import inspect

DebugMsg    = 0 # A message generated by the Debug() function.
InfoMsg     = 4 # A message generated by the Info() function.
WarningMsg  = 1 # A message generated by the Warning() function.
CriticalMsg = 2 # A message generated by the Critical() function.
FatalMsg    = 3 # A message generated by the Fatal() function.
SystemMsg   = CriticalMsg

_MessageHandler = None

def _process_msg(mode, msg):
    global _MessageHandler
    if _MessageHandler is not None:
        curframe = inspect.currentframe()
        calframe = inspect.getouterframes(curframe,1)
        if len(calframe) > 2:
            class context:
                __slots__ = ('file', 'line', 'function')
                def __str__(self):
                    return f"{self.file}:{self.line} [{self.function}]"
            ctx = context()
            ctx.file     = calframe[2][1]
            ctx.line     = calframe[2][2]
            ctx.function = calframe[2][3]
            _MessageHandler(mode, ctx, msg)

def debug(msg):
    _process_msg(DebugMsg, msg)

def info(msg):
    _process_msg(InfoMsg, msg)

def warn(msg):
    _process_msg(WarningMsg, msg)

def critical(msg):
    _process_msg(CriticalMsg, msg)

def fatal(msg):
    _process_msg(FatalMsg, msg)

def installMessageHandler(mh):
    global _MessageHandler
    _MessageHandler = mh